SOLID principles

Single Responsibility Principle (SRP)

    A class should have only one reason to change.
    A class should have only one responsibility or job to perform.

Open/Closed Principle (OCP)

    Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
    New functionality should be added through extension rather than modification of existing code.

Liskov Substitution Principle (LSP)

    Objects of a superclass should be able to be replaced with objects of its subclass without affecting the correctness of the program.
    A subclass should be able to be used in place of its superclass without causing any unexpected behavior.
    Interface Segregation Principle (ISP)
    Clients should not be forced to depend on interfaces they do not use.
    A class should only have a minimal set of methods required by its clients, and not implement any unnecessary methods.

Dependency Inversion Principle (DIP)

    High-level modules should not depend on low-level modules. Both should depend on abstractions.
    Abstractions should not depend on details. Details should depend on abstractions.